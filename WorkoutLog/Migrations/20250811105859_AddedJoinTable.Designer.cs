// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WorkoutLog.Migrations
{
    [DbContext(typeof(WorkoutLogDbContext))]
    [Migration("20250811105859_AddedJoinTable")]
    partial class AddedJoinTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DailyWorkoutExercise", b =>
                {
                    b.Property<int>("DailyWorkoutsId")
                        .HasColumnType("int");

                    b.Property<int>("ExercisesId")
                        .HasColumnType("int");

                    b.HasKey("DailyWorkoutsId", "ExercisesId");

                    b.HasIndex("ExercisesId");

                    b.ToTable("DailyWorkoutExercise");
                });

            modelBuilder.Entity("WorkoutLog.Models.DailyWorkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WorkoutDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkoutDuration")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("DailyWorkouts");
                });

            modelBuilder.Entity("WorkoutLog.Models.DailyWorkoutExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DailyWorkoutId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DailyWorkoutId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("DailyWorkoutExercises");
                });

            modelBuilder.Entity("WorkoutLog.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyPart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExerciseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseName")
                        .IsUnique();

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("DailyWorkoutExercise", b =>
                {
                    b.HasOne("WorkoutLog.Models.DailyWorkout", null)
                        .WithMany()
                        .HasForeignKey("DailyWorkoutsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutLog.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutLog.Models.DailyWorkoutExercise", b =>
                {
                    b.HasOne("WorkoutLog.Models.DailyWorkout", "DailyWorkout")
                        .WithMany("DailyWorkoutExercises")
                        .HasForeignKey("DailyWorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutLog.Models.Exercise", "Exercise")
                        .WithMany("DailyWorkoutExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyWorkout");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("WorkoutLog.Models.DailyWorkout", b =>
                {
                    b.Navigation("DailyWorkoutExercises");
                });

            modelBuilder.Entity("WorkoutLog.Models.Exercise", b =>
                {
                    b.Navigation("DailyWorkoutExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
